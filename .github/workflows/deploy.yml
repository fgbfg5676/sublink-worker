name: Deploy Worker

on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        run: npm install -g pnpm@10.11.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check and Create KV Namespace
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          KV_NAMESPACE="SUBLINK_KV"
          echo "Checking for KV namespace: $KV_NAMESPACE"
          # 使用 npx 调用 wrangler Action 最新版本
          LIST_OUTPUT=$(npx wrangler kv namespace list 2>&1 || true)
          LIST_OUTPUT=$(echo "$LIST_OUTPUT" | grep -v "Cloudflare collects" | grep -v "telemetry")
          KV_ID=$(echo "$LIST_OUTPUT" | jq -r '.[] | select(.title == "sublink-worker-'$KV_NAMESPACE'") | .id')
          
          if [ -z "$KV_ID" ]; then
              echo "KV namespace $KV_NAMESPACE does not exist. Creating..."
              CREATE_OUTPUT=$(npx wrangler kv namespace create "sublink-worker-$KV_NAMESPACE" 2>&1)
              KV_ID=$(echo "$CREATE_OUTPUT" | grep -o '[0-9a-f]\{32\}')
              echo "KV namespace $KV_NAMESPACE created with ID: $KV_ID"
          else
              echo "KV namespace $KV_NAMESPACE already exists with ID: $KV_ID"
          fi
          echo "KV_ID=$KV_ID" >> $GITHUB_ENV

      - name: Update wrangler.toml
        run: |
          WRANGLER_CONTENT=$(cat wrangler.toml)
          UPDATED_CONTENT=$(echo "$WRANGLER_CONTENT" | sed 's/id = "[^"]*"/id = "'$KV_ID'"/')
          echo "$UPDATED_CONTENT" > wrangler.toml
          echo "Updated wrangler.toml content:"
          cat wrangler.toml

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          command: deploy
